openapi: 3.0.0
info:
  title: Customers and Devices
  version: 1.0.0
  description: Manage CRUD operations on customers and their devices
paths:
  /customers:
    post:
      operationId: createCustomer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        201:
          description: the customer was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
  /customers/{customerId}:
    get:
      operationId: getCustomer
      description: Retrieve customer data, with or without aggregated device data
      parameters:
        - &customerId
          in: path
          name: customerId
          required: true
          schema:
            type: integer
        - in: query
          name: aggregateDevices
          required: false
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: the customer data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
  /customers/{customerId}/address:
    put:
      operationId: updateCustomerAddress
      parameters:
        - *customerId
      requestBody:
        description: the new address
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAddressRequest'
      responses:
        204:
          description: address updated
  /devices:
    post:
      operationId: createDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
      responses:
        201:
          description: the device was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
  /devices/{deviceCode}:
    get:
      operationId: getDevice
      parameters:
        - &deviceCode
          in: path
          name: deviceCode
          schema:
            type: string
            format: uuid
          required: true
      responses:
        200:
          description: the retrieved device
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
    delete:
      operationId: deleteDevice
      parameters:
        - *deviceCode
      responses:
        204:
          description: the device was deleted
  /devices/{deviceCode}/exists:
    get:
      operationId: deviceExists
      parameters:
        - *deviceCode
      responses:
        200:
          description: whether the given device is present in our DB
          content:
            application/json:
              schema:
                type: boolean
  /devices/{deviceCode}/status:
    put:
      operationId: updateDeviceStatus
      parameters:
        - *deviceCode
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStatusRequest'
      responses:
        204:
          description: status updated
components:
  schemas:
    Customer:
      type: object
      required: [id, name, surname, taxCode, address]
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        surname:
          type: string
        taxCode:
          type: string
        address:
          type: string
        devices:
          type: array
          items:
            $ref: '#/components/schemas/Device'
    UpdateAddressRequest:
      type: object
      properties:
        address:
          type: string
    Device:
      type: object
      required: [code, status]
      properties:
        code:
          type: string
          format: uuid
          readOnly: true
        status:
          $ref: '#/components/schemas/DeviceStatus'
        customer:
          type: integer
          writeOnly: true
    DeviceStatus:
      type: string
      enum: [ACTIVE, INACTIVE, LOST]
    UpdateStatusRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/DeviceStatus'
